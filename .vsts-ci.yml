variables:
  - name: _TeamName
    value: DotNetCore
  - name: Build.Repository.Clean
    value: true

# CI and PR triggers
trigger:
  batch: true
  branches:
    include:
    - cli
  paths:
    exclude:
    - "*.md"

pr:
  autoCancel: false
  branches:
    include:
    - '*'

# Build
stages:
- stage: Build_Windows
  displayName: Build Windows
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableTelemetry: true
      jobs:
      - job: Windows
        pool: # See https://helix.dot.net/ for VM names.
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals windows.vs2019.amd64
          ${{ else }}:
            name: NetCore-Public
            demands: ImageOverride -equals windows.vs2019.amd64.open
        variables:
        # Only enable publishing in official builds.
        - ${{ if and(eq(variables['System.TeamProject'], 'internal'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
          - group: Publish-Build-Assets
          - name: _OfficialBuildArgs
            value: /p:DotNetPublishUsingPipelines=true
                   /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
                   /p:TeamName=$(_TeamName)
        - ${{ else }}:
          - name: _OfficialBuildArgs
            value: ''
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
        steps:
        - script: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_OfficialBuildArgs)
          name: Build
          displayName: Build and run tests
          condition: succeeded()

        - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results'
            inputs:
              testResultsFormat: xUnit
              testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.xml'
              mergeTestResults: true
              searchFolder: $(System.DefaultWorkingDirectory)
              testRunTitle: sign unit tests - $(Agent.JobName)
            condition: succeededOrFailed()

        - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          - task: ComponentGovernanceComponentDetection@0
            displayName: Component Governance scan
            inputs:
              ignoreDirectories: '$(Build.SourcesDirectory)/.packages,$(Build.SourcesDirectory)/artifacts/obj/Sign.Cli'

# NuGet publishing
- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      publishingInfraVersion: 3
      enableSymbolValidation: true
      enableSourceLinkValidation: true
      validateDependsOn:
      - Build_Windows
      publishDependsOn:
      - Validate
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: false
        continueOnError: false
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "dotnet-sign"
        -TsaCodebaseName "dotnet-sign"
        -TsaPublish $True'